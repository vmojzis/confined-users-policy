#!/usr/bin/python3 -EsI
# Copyright (C) 2023 Red Hat
# AUTHOR: Vit Mojzis <vmojzis@redhat.com>
# see file 'COPYING' for use and warranty information
#
# semanage is a tool for managing SELinux configuration files
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation; either version 2 of
#    the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#                                        02111-1307  USA
#
#

import argparse
import os
import re
import seobject
import sys
import traceback

macro_calls = {
    "admin_commands": ("(call confinedom_admin_commands_macro ({}))", ("_t", "_r", "_sudo_t")),
    "graphical_login": ("(call confinedom_graphical_login_macro ({}))", ("_t", "_r", "_dbus_t")),
    "mozilla_usage": ("(call confinedom_mozilla_usage_macro ({}))", ("_t", "_r")),
    "networking": ("(call confinedom_networking_macro ({}))", ("_t", "_r")),
    "security_advanced": ("(call confinedom_security_advanced_macro ({}))", ("_t", "_r", "_sudo_t", "_userhelper_t")),
    "security_basic": ("(call confinedom_security_basic_macro ({}))", ("_t", "_r")),
    "sudo": ("(call confinedom_sudo_macro ({}))", ("_t", "_r", "_sudo_t", "_sudo_tmp_t")),
    "user_login": ("(call confinedom_user_login_macro ({}))", ("_t", "_r", "_gkeyringd_t", "_dbus_t", "_exec_content")),
    "ssh_connect": ("(call confined_ssh_connect_macro ({}))", ("_t", "_r", "_ssh_agent_t")),
    "basic_commands": ("(call confined_use_basic_commands_macro ({}))", ("_t", "_r"))
}

typedefs = {
    "_t": "(type {}_t)",
    "_r": "(role {}_r)",
    "_dbus_t": "(type {}_dbus_t)",
    "_gkeyringd_t": "(type {}_gkeyringd_t)",
    "_ssh_agent_t": "(type {}_ssh_agent_t)",
    "_sudo_t": "(type {}_sudo_t)",
    "_sudo_tmp_t": "(type {}_sudo_tmp_t)",
    "_userhelper_t": "(type {}_userhelper_t)",
    "_exec_content": "(boolean {}_exec_content true)"
}

parser = argparse.ArgumentParser(
    prog="sepolicy_confine",
    description="SELinux confined user policy generator"
)

parser.add_argument("-a", "--admin_commands", action='store_true',
                    default=False, dest="admin_commands",
                    help="Use administrative commands (vipw, passwd, ...)")
parser.add_argument("-g", "--graphical_login", action='store_true',
                    default=False,dest="graphical_login",
                    help="Use graphical login environment")
parser.add_argument("-m", "--mozilla_usage", action='store_true', default=False,dest="mozilla_usage", help="Use mozilla firefox")
parser.add_argument("-n", "--networking", action='store_true', default=False,dest="networking", help="Manage basic networking (ip, ifconfig, traceroute, tcpdump, ...)")
parser.add_argument("-d", "--security_advanced", action='store_true', default=False,dest="security_advanced", help="Manage SELinux settings (semanage, semodule, sepolicy, ...)")
parser.add_argument("-i", "--security_basic", action='store_true', default=False,dest="security_basic", help="Use read-only security-related tools (seinfo, getsebool, sesearch, ...)")
parser.add_argument("-s", "--sudo", action='store_true', default=False,dest="sudo", help="Run commands as root using sudo")
parser.add_argument("-l", "--user_login", action='store_true', default=False,dest="user_login", help="Basic rules common to all users (tty, pty, ...)")
parser.add_argument("-c", "--ssh_connect", action='store_true', default=False,dest="ssh_connect", help="Connect over SSH")
parser.add_argument("-b", "--basic_commands", action='store_true', default=False,dest="basic_commands", help="Use basic commands (date, ls, ps, man, systemctl -user, journalctl -user, passwd, ...)")
parser.add_argument("--level", nargs='?', default="s0", dest="level")
parser.add_argument("--range", nargs='?', default="s0-s0:c0.c1023", dest="range")
parser.add_argument("uname")

args = parser.parse_args()

# MCS/MLS range handling - needs to be separated into up-to 4 parts
# s0-s15:c0.c1023 ->  (userrange {uname}_u ((s0 ) (s15 (range c0 c1023))))
# s0:c0 ->  (userrange {uname}_u ((s0 ) (s0 (c0))))
mls_range = args.range
mcs_range = ""
# separate MCS portion
if ':' in args.range:
    #s0:c0.c1023
    (mls_range, mcs_range) = args.range.split(":")
if '-' in mls_range:
    #s0-s15
    (range_l, range_h) = mls_range.split("-")
else:
    #s0
    range_l = mls_range
    range_h = range_l
if mcs_range != "":
    if '.' in mcs_range:
        # s0:c0.c1023 -> (userrange {uname}_u ((s0 ) (s0 (range c0 c1023))))
        (mcs_range_l, mcs_range_h) = mcs_range.split(".")
        mcs_range = "(range {} {})".format(mcs_range_l, mcs_range_h)
    else:
        # s0:c0 -> (userrange {uname}_u ((s0 ) (s0 (c0))))
        mcs_range = "({})".format(mcs_range)

range = "({} ) ({} {})".format(range_l, range_h, mcs_range)

defs = set()

policy = """
(user {uname}_u)
(userrole {uname}_u {uname}_r)
(userlevel {uname}_u ({level}))
(userrange {uname}_u ({range}))
""".format(uname=args.uname, level=args.level, range=range)

# process arguments determining which macros are to be used
for arg, value in vars(args).items():
    #getattr(args, arg)
    if not value or arg not in macro_calls.keys():
        continue
    call = macro_calls[arg][0]
    for param in macro_calls[arg][1]:
        defs.add(typedefs[param].format(args.uname))
    policy += '\n' + (macro_calls[arg][0].format(" ".join([args.uname + s for s in macro_calls[arg][1]])))
    #print("{}: {}".format(arg, value))

policy = '\n'.join(sorted(defs)) + policy

with open("{}.cil".format(args.uname), 'w') as f:
    f.write(policy)

print("Created {}.cil".format(args.uname))
print("Run the following commands to apply the new policy:")
print("Install the new policy module")
print("# semodule -i {}.cil all.cil".format(args.uname))
print("Create a default context file for the new user")
print("# sed -e ’s|user|{}|g’ /etc/selinux/targeted/contexts/users/user_u > /etc/selinux/targeted/contexts/users/{}_u".format(args.uname, args.uname))
print("Map the new selinux user to an existing user account")
print("# semanage login -a -s {}_u {}".format(args.uname, args.uname))
print("Fix labels in the user\'s home directory")
print("# restorecon -RvF /home/{}".format(args.uname))
